import pygame
import sys
import random
import math

# Inicializar o pygame
pygame.init()

# Configurações da janela
WIDTH, HEIGHT = 800, 800
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Simulador de Robô 2D")
clock = pygame.time.Clock()

# Carregar imagens (substituir pelos caminhos reais das imagens)
robot_image = pygame.image.load("robot.png")
obstacle_static_image = pygame.image.load("armazem.png")
obstacle_dynamic_image = pygame.image.load("Car.png")
road_image = pygame.image.load("road.png")

# Redimensionar imagens para um tamanho padrão
robot_image = pygame.transform.scale(robot_image, (25, 75))
#robot_image = pygame.transform.rotate(robot_image, 180)
obstacle_static_image = pygame.transform.scale(obstacle_static_image, (100, 100))
obstacle_dynamic_image = pygame.transform.scale(obstacle_dynamic_image, (25, 50))
obstacle_dynamic_image = pygame.transform.rotate(obstacle_dynamic_image, 180)
road_image = pygame.transform.scale(road_image, (150, HEIGHT))


# Classe para o Robô
class Robot:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.width = robot_image.get_width()
        self.height = robot_image.get_height()
        self.speed = 5
        self.direction = 0  # Direção inicial

    def move(self, velocity_x, velocity_y):
        self.x += velocity_x
        self.y += velocity_y
        self.direction = math.degrees(math.atan2(velocity_x, velocity_y))

    def draw(self, surface):
        rotated_image = pygame.transform.rotate(robot_image, self.direction + 180)
        surface.blit(rotated_image, (self.x - self.width // 2, self.y - self.height // 2))

   
    def get_rect(self):
        rect = pygame.Rect(self.x - self.width // 2, self.y - self.height // 2, self.width, self.height)
        return rect
    

# Classe para Obstáculos
class Obstacle:
    def __init__(self, x, y, width, height, dynamic=False, velocity=(0, 0)):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.dynamic = dynamic
        self.velocity_x, self.velocity_y = velocity

    def move(self):
        if self.dynamic:
            self.x += self.velocity_x
            self.y += self.velocity_y

    def draw(self, surface):
        image = obstacle_dynamic_image if self.dynamic else obstacle_static_image
        surface.blit(image, (self.x - self.width // 2, self.y - self.height // 2))

 
    def get_rect(self):
        rect = pygame.Rect(self.x - (self.width // 2), self.y - (self.height // 2), self.width, self.height)
        return rect
    



# Classe para Estrada
class Road:
    def __init__(self,x_position, y_position):
        self.y_position = y_position
        self.x_position = x_position


    def draw(self, surface):
        surface.blit(road_image, (self.x_position, self.y_position))


# Criar objetos
road = Road(WIDTH//2-75,0)  # Centralizar a estrada
robot = Robot(450, 750)
ws = obstacle_static_image.get_width()
hs = obstacle_static_image.get_height()
wd = obstacle_dynamic_image.get_width()
hd = obstacle_dynamic_image.get_height()

obstacles = [
    Obstacle(100, 200, ws, hs, dynamic=False),
    Obstacle(100, 400, ws, hs, dynamic=False),
    Obstacle(100, 600, ws, hs, dynamic=False),
    Obstacle(700, 200, ws, hs, dynamic=False),
    Obstacle(700, 400, ws, hs, dynamic=False),
    Obstacle(700, 600, ws, hs, dynamic=False)]

# Variáveis de controle para o solucionador
time_since_last_solver_call = 0
solver_output = [(0, 0)]  # Inicialmente, o robô está parado
frame_index = 0
time_rand=0
# Loop principal
running = True
while running:
    screen.fill((255, 255, 255))  # Fundo branco

    # Eventos
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        # Desenhar a estrada
    road.draw(screen)

    # Adicionar obstáculos dinâmicos aleatoriamente
    time_rand += clock.get_time()
    if time_rand >= 500:
        sim = random.randint(1, 10)
        if sim == 2:
            obstacles.append(Obstacle(350, 0, wd, hd, dynamic=True, velocity=(0, 5)))
            time_rand=0


    # Atualizar o solucionador a cada 1 segundo
    time_since_last_solver_call += clock.get_time()
    if time_since_last_solver_call >= 1000:  # 1 segundo em milissegundos
        time_since_last_solver_call = 0

        # Chamada ao solucionador
        # O solucionador deve calcular velocidades para cada frame do próximo segundo
        # Formato do output esperado: [(vel_x1, vel_y1), (vel_x2, vel_y2), ...]
        vx=random.uniform(-2, 2)
        vy=random.uniform(-2, 2)
        solver_output = [(-2,-2) for _ in range(30)]  # Placeholder
        frame_index = 0

    # Usar as velocidades calculadas pelo solucionador
    if frame_index < len(solver_output):
        velocity_x, velocity_y = solver_output[frame_index]
        robot.move(velocity_x, velocity_y)
        frame_index += 1

    # Verificar colisões
    robot_rect = robot.get_rect()
    for obstacle in obstacles:
        obstacle_rect = obstacle.get_rect()
        if robot_rect.colliderect(obstacle_rect):
            running = False

    # Atualizar e desenhar obstáculos
    for obstacle in obstacles:
        obstacle.move()
        obstacle.draw(screen)

    # Desenhar o robô
    robot.draw(screen)

    # Atualizar a tela
    pygame.display.flip()
    clock.tick(30)

# Sair do pygame
pygame.quit()
sys.exit()
